<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Donald Raab: Happy Holidays!</title>
	<guid isPermaLink="false">https://medium.com/p/dee5c9ccf0c4</guid>
	<link>https://medium.com/@donraab/happy-holidays-dee5c9ccf0c4?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;It’s time for some Java Reindeer games.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*dY2ZJiShZomX-GCfmjHMnA.png&quot; /&gt;A Festival of lights in New York&lt;/figure&gt;&lt;p&gt;This blog is going to be mostly code. I am going to demonstrate some Eclipse Collections and Java Stream APIs, with a holiday twist. I’ll start by implementing a Reindeer Enum in Java with some help from &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;public enum Reindeer&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;Dasher&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Dancer, Prancer&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Vixen&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Comet&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Cupid&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Donner&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Blitzen&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;Rudolph&lt;/em&gt;&lt;/strong&gt;;&lt;/pre&gt;&lt;pre&gt;    public static ImmutableList&amp;lt;Reindeer&amp;gt; all()&lt;br /&gt;    {&lt;br /&gt;        return &lt;em&gt;theMostFamousReindeerOfAll&lt;/em&gt;()&lt;br /&gt;                .newWithAll(&lt;em&gt;theOtherReindeer&lt;/em&gt;()&lt;br /&gt;                        .flatCollect(Reindeer::&lt;em&gt;toList&lt;/em&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    private static ImmutableList&amp;lt;Twin&amp;lt;Reindeer&amp;gt;&amp;gt; theOtherReindeer()&lt;br /&gt;    {&lt;br /&gt;        return Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Dasher&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Dancer&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Prancer&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Vixen&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Comet&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Cupid&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Donner&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Blitzen&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    private static &lt;br /&gt;    ImmutableList&amp;lt;Reindeer&amp;gt; theMostFamousReindeerOfAll()&lt;br /&gt;    {&lt;br /&gt;        return Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(Reindeer.&lt;strong&gt;&lt;em&gt;Rudolph&lt;/em&gt;&lt;/strong&gt;);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    private static &lt;br /&gt;    ImmutableList&amp;lt;Reindeer&amp;gt; toList(Twin&amp;lt;Reindeer&amp;gt; twin)&lt;br /&gt;    {&lt;br /&gt;        return Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(twin.getOne(), twin.getTwo());&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Twin&amp;lt;Reindeer&amp;gt; and(Reindeer other)&lt;br /&gt;    {&lt;br /&gt;        return Tuples.&lt;em&gt;twin&lt;/em&gt;(this, other);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public int nameLength()&lt;br /&gt;    {&lt;br /&gt;        return this.name().length();&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Character firstLetterOfName()&lt;br /&gt;    {&lt;br /&gt;        return Character.&lt;em&gt;valueOf&lt;/em&gt;(this.name().charAt(0));&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;First, I create an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html&quot;&gt;&lt;strong&gt;ImmutableList&lt;/strong&gt;&lt;/a&gt; of Reindeer with Rudolph at the front in the method named &lt;strong&gt;&lt;em&gt;all&lt;/em&gt;&lt;/strong&gt;. I create an &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; of pairs of all of the other reindeer, based on their usual order in the popular song. I use the type &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/tuple/Twin.html&quot;&gt;&lt;strong&gt;Twin&lt;/strong&gt;&lt;/a&gt;, which is a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/tuple/Pair.html&quot;&gt;&lt;strong&gt;Pair&lt;/strong&gt;&lt;/a&gt; that has the same type for both items. Finally, I used the method &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html#flatCollect-org.eclipse.collections.api.block.function.Function-&quot;&gt;&lt;strong&gt;flatCollect&lt;/strong&gt;&lt;/a&gt; to flatten all of the pairs of Reindeer into a single list which is appended to the &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; with Rudolph using the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html#newWithAll-java.lang.Iterable-&quot;&gt;&lt;strong&gt;newWithAll&lt;/strong&gt;&lt;/a&gt; method.&lt;/p&gt;&lt;p&gt;Now I will implement some tests for the Reindeer name games.&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Create a comma separated String of the Reindeer names.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;@Test&lt;br /&gt;public void reindeerNameGame1()&lt;br /&gt;{&lt;br /&gt;    String expectedNames = &lt;strong&gt;&quot;Rudolph, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Dasher, Dancer, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Prancer, Vixen, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Comet, Cupid, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Donner, Blitzen&quot;&lt;/strong&gt;;&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            expectedNames,&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;().makeString(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            expectedNames,&lt;br /&gt;            String.&lt;em&gt;join&lt;/em&gt;(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;,&lt;br /&gt;                    Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                            .asLazy()&lt;br /&gt;                            .collect(Reindeer::name)));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            expectedNames,&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                    .stream()&lt;br /&gt;                    .map(Reindeer::name)&lt;br /&gt;                    .collect(Collectors.&lt;em&gt;joining&lt;/em&gt;(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;)));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In this test, I show three different ways a comma separated &lt;strong&gt;&lt;em&gt;String&lt;/em&gt;&lt;/strong&gt; of the reindeer names can be created. First, I use &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/RichIterable.html#makeString-java.lang.String-&quot;&gt;&lt;strong&gt;makeString&lt;/strong&gt;&lt;/a&gt; from Eclipse Collections. The method &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/RichIterable.html#makeString-java.lang.String-&quot;&gt;&lt;strong&gt;makeString&lt;/strong&gt;&lt;/a&gt; does not require the object to be a &lt;strong&gt;&lt;em&gt;CharSequence&lt;/em&gt;&lt;/strong&gt;. It uses the &lt;strong&gt;&lt;em&gt;toString&lt;/em&gt;&lt;/strong&gt; implementation of the Object. Next, I use &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.Iterable-&quot;&gt;&lt;strong&gt;String.join&lt;/strong&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;which was added in Java 8. This method takes an &lt;strong&gt;&lt;em&gt;Iterable&lt;/em&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;CharSequence&lt;/em&gt;&lt;/strong&gt;, which I create using a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/LazyIterable.html&quot;&gt;&lt;strong&gt;LazyIterable&lt;/strong&gt;&lt;/a&gt; with &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/LazyIterable.html#collect-org.eclipse.collections.api.block.function.Function-&quot;&gt;&lt;strong&gt;collect&lt;/strong&gt;&lt;/a&gt;. Finally, I use a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/collection/ImmutableCollection.html#stream--&quot;&gt;&lt;strong&gt;stream&lt;/strong&gt;&lt;/a&gt; with the &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; returned from &lt;strong&gt;&lt;em&gt;all&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; each Reindeer to its &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;collect&lt;/em&gt;&lt;/strong&gt; them all into a &lt;strong&gt;&lt;em&gt;String&lt;/em&gt;&lt;/strong&gt; using &lt;strong&gt;&lt;em&gt;Collectors.joining&lt;/em&gt;&lt;/strong&gt;. All three approaches have the exact same result.&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Count the Reindeer names based on their size.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;@Test&lt;br /&gt;public void reindeerNameGame2()&lt;br /&gt;{&lt;br /&gt;    IntBag nameCounts =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;().asLazy()&lt;br /&gt;                    .collectInt(Reindeer::nameLength)&lt;br /&gt;                    .toBag();&lt;br /&gt;&lt;br /&gt;    IntBag nameCountsFromIntStream =&lt;br /&gt;            IntBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.withAll(&lt;br /&gt;                    Reindeer.&lt;em&gt;all&lt;/em&gt;().stream()&lt;br /&gt;                            .mapToInt(Reindeer::nameLength));&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;Integer, Long&amp;gt; streamNameCounts =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;().stream()&lt;br /&gt;                    .collect(Collectors.&lt;em&gt;groupingBy&lt;/em&gt;(&lt;br /&gt;                            Reindeer::nameLength,&lt;br /&gt;                            Collectors.&lt;em&gt;counting&lt;/em&gt;()));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(nameCounts, nameCountsFromIntStream);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCounts.sizeDistinct());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCounts.occurrencesOf(5));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCounts.occurrencesOf(6));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCounts.occurrencesOf(7));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new Long(3), streamNameCounts.get(5));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new Long(3), streamNameCounts.get(6));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new Long(3), streamNameCounts.get(7));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In this test, I show three different ways to count the names of the Reindeer by their length. First, I create an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/primitive/IntBag.html&quot;&gt;&lt;strong&gt;IntBag&lt;/strong&gt;&lt;/a&gt;, by collecting all of the name lengths for the Reindeer using &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/LazyIterable.html#collectInt-org.eclipse.collections.api.block.function.primitive.IntFunction-&quot;&gt;&lt;strong&gt;collectInt&lt;/strong&gt;&lt;/a&gt; and then converting the result &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/IntIterable.html#toBag--&quot;&gt;&lt;strong&gt;toBag&lt;/strong&gt;&lt;/a&gt;. In the second case, I create an &lt;strong&gt;&lt;em&gt;IntStream&lt;/em&gt;&lt;/strong&gt; from the Reindeer by mapping their name lengths to an int using &lt;strong&gt;&lt;em&gt;mapToInt&lt;/em&gt;&lt;/strong&gt;. I use the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/factory/bag/primitive/MutableIntBagFactory.html#withAll-java.util.stream.IntStream-&quot;&gt;&lt;strong&gt;withAll&lt;/strong&gt;&lt;/a&gt; method to create an &lt;strong&gt;&lt;em&gt;IntBag&lt;/em&gt;&lt;/strong&gt; from an &lt;strong&gt;&lt;em&gt;IntStream&lt;/em&gt;&lt;/strong&gt;. This method became available in &lt;a href=&quot;https://medium.com/@donraab/nine-features-in-eclipse-collections-9-0-a2ca97dfdf74&quot;&gt;Eclipse Collections 9.0&lt;/a&gt; (Look at Item #3 for a comparison to previous versions). Finally, I use &lt;strong&gt;&lt;em&gt;Stream&lt;/em&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;em&gt;Collectors.groupingBy&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Collectors.counting &lt;/em&gt;&lt;/strong&gt;which results in a &lt;strong&gt;&lt;em&gt;Map&lt;/em&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;Integer&lt;/em&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;em&gt;Long&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Group Reindeer by the first letter of their names.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;@Test&lt;br /&gt;public void reindeerNameGame3()&lt;br /&gt;{&lt;br /&gt;    Multimap&amp;lt;Character, Reindeer&amp;gt; multimap =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;().groupBy(Reindeer::firstLetterOfName);&lt;/pre&gt;&lt;pre&gt;    Map&amp;lt;Character, List&amp;lt;Reindeer&amp;gt;&amp;gt; mapOfLists =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                    .stream()&lt;br /&gt;                    .collect(Collectors.&lt;em&gt;groupingBy&lt;/em&gt;(&lt;br /&gt;                            Reindeer::firstLetterOfName));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Dasher, Dancer, Donner&quot;&lt;/strong&gt;,&lt;br /&gt;            multimap.get(&lt;strong&gt;'D'&lt;/strong&gt;).makeString(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Comet, Cupid&quot;&lt;/strong&gt;,&lt;br /&gt;            multimap.get(&lt;strong&gt;'C'&lt;/strong&gt;).makeString(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(multimap.get(&lt;strong&gt;'D'&lt;/strong&gt;), mapOfLists.get(&lt;strong&gt;'D'&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(multimap.get(&lt;strong&gt;'C'&lt;/strong&gt;), mapOfLists.get(&lt;strong&gt;'C'&lt;/strong&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In this test, I illustrate two ways to group Reindeer by the first letter of their last name. First, I use the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html#groupBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;&lt;strong&gt;groupBy&lt;/strong&gt;&lt;/a&gt; method available directly on &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt;, which returns a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;&lt;strong&gt;Multimap&lt;/strong&gt;&lt;/a&gt;. In the second example, I use the stream method on &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; and collect method on Stream with the &lt;strong&gt;&lt;em&gt;groupingBy&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;Collector&lt;/em&gt;&lt;/strong&gt; on the &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Collectors.html&quot;&gt;&lt;strong&gt;Collectors&lt;/strong&gt;&lt;/a&gt; utility class.&lt;/p&gt;&lt;p&gt;I hope you enjoyed joining in these reindeer games. I explored a bunch of &lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&quot;&gt;Streams&lt;/a&gt; APIs in these three examples that may be useful in your own Java code.&lt;/p&gt;&lt;p&gt;Have a Happy Holiday and Happy New Year!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=dee5c9ccf0c4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 22 Dec 2017 02:59:02 +0000</pubDate>
</item>
<item>
	<title>Benjamin Cabe: Monetizing IoT Data using IOTA</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=3059</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/ErYhBuzemDg/monetizing-iot-data-using-iota</link>
	<description>&lt;p&gt;There is a lot of buzz around cryptocurrencies  – will BTC be over $20,000 by the time this blog post goes live? &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt; – these days, but beyond the hype, one thing is pretty clear: it enables a decentralized economy that is particularly interesting to look at from an IoT perspective.&lt;/p&gt;
&lt;p&gt;For the Internet of Things, I believe the role of cryptocurrencies and distributed ledgers is threefold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;monetization of IoT data&lt;/strong&gt; – cryptocurrencies make it really easy to implement scenarios where data producers can get a financial compensation in exchange for the value provided by the data they expose. Think of a weather station you would put on your balcony: people or corporations could have access to the feed of sensor data in exchange for some tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;smart contracts&lt;/strong&gt; – taking monetization a step further, smart contracts can enable higher-order, secured, transactions to automatically take place on the network. If you take the example of the weather station, you could sign a smart contract with a 3rd party whereby you get paid for giving access to your sensor data if and only if you can provide an uptime of at least 99%. Note that this would probably require a trusted third party responsible for checking your uptime and storing it in the ledger.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security&lt;/strong&gt; – manufacturers can use a distributed ledger to store information that can be used to help securely bootstrap  IoT devices, by e.g allowing customers to check the authenticity of a chip.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog post, we will focus on the first topic: &lt;strong&gt;monetizing IoT data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For that, we will look at leveraging &lt;a href=&quot;https://iota.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;IOTA’s distributed ledger&lt;/a&gt;. We will be showing how anyone can be given access to “simple” IoT sensor data on an MQTT broker, while only people who are paying for it will be able to access the live, raw, data stream.&lt;/p&gt;
&lt;h2&gt;Use case&lt;/h2&gt;
&lt;p&gt;We will be basing this article on the use case of someone, let’s call her Jane, willing to give access to a live sensor data stream coming from a smart plug, granted that she gets some money (iotas) in return :smile:.&lt;/p&gt;
&lt;p&gt;The instant power consumption metrics will be published to an MQTT broker twice per second, making for a pretty accurate sampling that people might be interested in buying. On the same MQTT broker, Jane will also be making available the 1-min moving average of the power consumption for anyone to access, even if they don’t necessarily want to pay extra money.&lt;/p&gt;
&lt;p&gt;When John, who is maybe a data scientist interested in getting his hands on “real” data wants to get the power consumption from Jane’s smart plug, he has two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access the MQTT broker and subscribe to data published on the ‘public’ &lt;code&gt;sensor/1m&lt;/code&gt; topic, for free,&lt;/li&gt;
&lt;li&gt;send some IOTAs to Jane (she’s decided that 500 iotas is what people should pay to access the data for one hour), for his MQTT client to be granted access to &lt;code&gt;sensor/live&lt;/code&gt; topic where the live, and more valuable to him, data stream is being published.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Technology being used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Eclipse &lt;/span&gt;Mosquitto &lt;/strong&gt;as our MQTT broker of choice.&lt;/li&gt;
&lt;li&gt;Two &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;IOTA&lt;/strong&gt;&lt;/span&gt; wallets, one where the payments to Jane shall be sent to, and one for John to pay for accessing sensor data&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/belkin_wemo_.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignright wp-image-3072&quot; height=&quot;151&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/belkin_wemo_-239x300.png&quot; width=&quot;120&quot; /&gt;&lt;/a&gt;mosquitto-auth-plug,&lt;/strong&gt;&lt;/span&gt; a flexible authentication plug-in for Mosquitto. We will use it for implementing a flexible access-control model, based on the information available on the IOTA tangle (i.e payments)
&lt;ul&gt;
&lt;li&gt;The ACLs (access-control lists) will be stored in a &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/span&gt; database, used as the authentication backend for mosquitto-auth-plug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Belkin WeMo Insight&lt;/strong&gt;&lt;/span&gt; smart plug.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;Enough with the words! I’ve put together a video that shows the whole scenario in action. While you will quickly realize that I do a bad job impersonating Jane and John, what I hope you notice is that this is a &lt;strong&gt;real &lt;/strong&gt;&lt;strong&gt;demo&lt;/strong&gt;, and anyone can implement something similar &lt;strong&gt;today&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The technology is here&lt;/strong&gt;, and while it has some limitations, I do think it’s worth exploring what new scenarios it enables.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Check out the code&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I have &lt;a href=&quot;https://github.com/kartben/iota-mosquitto-demo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;published all the code&lt;/a&gt; behind this proof-of-concept on &lt;a href=&quot;https://github.com/kartben/iota-mosquitto-demo&quot;&gt;my Github repository&lt;/a&gt;, please check it out and open pull requests or issues if you happen to give it a try!&lt;/p&gt;
&lt;h2&gt;Next steps?&lt;/h2&gt;
&lt;p&gt;This is obviously a simple proof-of-concept, and I am almost certain it is not free of security issues. I would certainly be happy to hear from you if you have feedback :smile:.&lt;/p&gt;
&lt;p&gt;I see at least two things that would be worth improving:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOTA transactions, just like with many other distributed ledgers, can take a significant amount of time before they get confirmed. Having to wait for a couple hours after you’ve made a payment to effectively get access to the data can seriously impact the user experience. A nice improvement would be to rely on &lt;strong&gt;&lt;a href=&quot;https://blog.iota.org/instant-feeless-flash-channels-88572d9a4385&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;IOTA Flash Channels&lt;/a&gt;&lt;/strong&gt;,  as they allow to perform instantaneous, off-tangle transactions.&lt;/li&gt;
&lt;li&gt;In the current PoC, the Mosquitto server only accepts connections from a list of users already agreed upon. This wouldn’t be difficult, and much smarter, to allow anonymous access to anyone, and let clients interested in having full access to the data indicate in their payment message the username/password they plan on using when reconnecting as authenticated clients. This information should, of course, be encrypted with a key only known to the client and the server – this key, unique for each client, could be broadcasted to anonymous clients on the $SYS topic, for example…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you see other areas for improvement? Have you seen similar solutions implemented with other cryptocurrencies?&lt;/p&gt;
&lt;p&gt;Note that the IOTA folks have recently announced an &lt;a href=&quot;https://datum.iota.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;IoT data market&lt;/a&gt; that seems to implement a similar idea, but I haven’t had time to look into it closely.&lt;/p&gt;
 &lt;p&gt;The post &lt;a href=&quot;https://blog.benjamin-cabe.com/2017/12/21/monetizing-iot-data-using-iota&quot; rel=&quot;nofollow&quot;&gt;Monetizing IoT Data using IOTA&lt;/a&gt; appeared first on &lt;a href=&quot;https://blog.benjamin-cabe.com&quot; rel=&quot;nofollow&quot;&gt;Benjamin Cabé&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/ErYhBuzemDg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 21 Dec 2017 19:34:27 +0000</pubDate>
</item>
<item>
	<title>Holger Voormann: Eclipse Oxygen.2 IDE Improvements: Java IDE, Git, C/C++</title>
	<guid isPermaLink="false">http://eclipsehowl.wordpress.com/?p=1354</guid>
	<link>https://eclipsehowl.wordpress.com/2017/12/21/eclipse-oxygen-2-ide-improvements-java-ide-git-c-c/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLnh_8hTD4yvnhXSttuewEKgKkmlIj_ND-&quot;&gt;As usual&lt;/a&gt;, I have made a short video that shows some IDE improvements of the latest Eclipse release (thanks to all of you who have contributed) in action:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U&quot;&gt;&lt;img alt=&quot;Eclipse Oxygen.2 IDE Improvements: Java IDE, Git, C/C++&quot; class=&quot;alignnone size-full wp-image-1149&quot; height=&quot;253&quot; src=&quot;https://eclipsehowl.files.wordpress.com/2017/12/eclipse_oxygen_2_ide_improvements.png?w=450&amp;amp;h=253&quot; width=&quot;450&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=26s&quot; rel=&quot;noopener&quot;&gt;Java IDE:&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=34s&quot; rel=&quot;noopener&quot;&gt;Fixed: ClassNotFoundException with a JAR in another project and with Java 9&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/525844&quot; rel=&quot;noopener&quot;&gt;bug 525844&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=48s&quot; rel=&quot;noopener&quot;&gt;Fixed: Exporting runnable JAR&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/525711&quot; rel=&quot;noopener&quot;&gt;bug 525711&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=58s&quot; rel=&quot;noopener&quot;&gt;Fixed: Running Ant in a non-Java project in a separate JRE&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/522581&quot; rel=&quot;noopener&quot;&gt;bug 522581&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m11s&quot; rel=&quot;noopener&quot;&gt;Fixed: In module-info requiring a not by default resolved Java 9 module&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/526054&quot; rel=&quot;noopener&quot;&gt;bug 526054&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m24s&quot; rel=&quot;noopener&quot;&gt;Drag and drop of entries between modulepath and classpath&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/522593&quot; rel=&quot;noopener&quot;&gt;bug 522593&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m36s&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt; (see also &lt;a href=&quot;http://eclip.se/dl&quot; rel=&quot;noopener&quot;&gt;EGit 4.9&lt;/a&gt;):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m40s&quot; rel=&quot;noopener&quot;&gt;Git Staging view: add/remove all/selected buttons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m02s&quot; rel=&quot;noopener&quot;&gt;Git Staging view: right-click menu with ‘Assume Unchanged’ and ‘Untrack’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m08s&quot; rel=&quot;noopener&quot;&gt;Repository switcher in the Git Staging, Git Reflog, Interactive Rebase and History views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m22s&quot; rel=&quot;noopener&quot;&gt;Redesigned icons: disable filtering, add/clone/create a repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m40s&quot; rel=&quot;noopener&quot;&gt;C/C++&lt;/a&gt; (see also &lt;a href=&quot;http://eclip.se/dm&quot; rel=&quot;noopener&quot;&gt;CDT 9.4&lt;/a&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m40s&quot; rel=&quot;noopener&quot;&gt;):&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m44s&quot; rel=&quot;noopener&quot;&gt;Docker Container Launch Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=4m22s&quot; rel=&quot;noopener&quot;&gt;Suppress problem comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=4m36s&quot; rel=&quot;noopener&quot;&gt;‘decltype’ improvement: showing and navigating to the declaration &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=4m52s&quot; rel=&quot;noopener&quot;&gt;Code formatter as a command line application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;In case you missed it:&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;https://youtu.be/wI3VC1lhbK8&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone&quot; height=&quot;124&quot; src=&quot;https://eclipsehowl.files.wordpress.com/2017/11/eclipse_oxygen_1_ide_improvements.png?w=222&amp;amp;h=124&quot; width=&quot;222&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://youtu.be/Y0-cO9wZj6w&quot;&gt;&lt;img alt=&quot;Eclipse Oxygen IDE Improvements: General, Java and Git&quot; class=&quot;alignnone&quot; height=&quot;124&quot; src=&quot;https://eclipsehowl.files.wordpress.com/2017/06/eclipse_oxygen_0_ide_improvements2.png?w=222&amp;amp;h=124&quot; width=&quot;222&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h4&gt;Next releases (&lt;a href=&quot;http://www.google.com/calendar/embed?src=gchs7nm4nvpm837469ddj9tjlk%40group.calendar.google.com&quot;&gt;calendar&lt;/a&gt; / &lt;a href=&quot;http://www.google.com/calendar/ical/gchs7nm4nvpm837469ddj9tjlk%40group.calendar.google.com/public/basic.ics&quot;&gt;ICAL&lt;/a&gt;):&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/calendar/event?eid=Mm1jajlpa2hncHU4NzJhNzdqMXFwMDM2bDUgZ2NoczdubTRudnBtODM3NDY5ZGRqOXRqbGtAZw&quot;&gt;Oxygen.3 on March 21, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/calendar/event?eid=NWI2cXM4MHFzc2IzbHRvYWZhMjVmajJnbzkgZ2NoczdubTRudnBtODM3NDY5ZGRqOXRqbGtAZw&quot;&gt;Photon.0 on June 27, 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/eclipsehowl.wordpress.com/1354/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/eclipsehowl.wordpress.com/1354/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=eclipsehowl.wordpress.com&amp;amp;blog=11064764&amp;amp;post=1354&amp;amp;subd=eclipsehowl&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 21 Dec 2017 12:41:26 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to Oxygen.2</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=37684</guid>
	<link>https://eclipsesource.com/blogs/2017/12/21/eclipsesource-oomph-profile-updated-to-oxygen-2/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Yesterday, Oxygen.2 has been released, a new version of the Eclipse IDE and platform. It contains many useful improvements, so it is worth to update. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One small but useful improvement we especially like is the enhanced EGit staging view. It provides new buttons to stage and unstage files (selected one or all), as well as to sort the unstaged changes. Further, the context menu directly allows to ignore files, assume them to be unchanged and even directly delete them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-37685&quot; height=&quot;138&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/12/Selection_049-300x125.jpg&quot; width=&quot;331&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Futher improvements, e.g. for Java 9 support are summarized in the following video provided by Holger Voormann:&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you use our EclipseSource Oomph profile (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2015/08/17/introducing-the-eclipsesource-oomph-profile/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details), you should get a notification and Oomph will apply the update automatically. If you do not get the notification, just navigate to the menu entry “Help” =&amp;gt; “Perform Set-Up Task”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will automatically update all plugins to Oxygen, but keep all existing settings untouched.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-37686&quot; height=&quot;172&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/12/Selection_048-300x172.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Have fun with Oxygen.2!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 21 Dec 2017 11:51:14 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x based Framework URL Shortener Backend</title>
	<guid isPermaLink="true">http://vertx.io/blog/eclipse-vert-x-based-framework-url-shortener-backend</guid>
	<link>http://vertx.io/blog/eclipse-vert-x-based-framework-url-shortener-backend</link>
	<description>&lt;article&gt;&lt;h2 id=&quot;aws-lambda-vertx-framework-url-shortener-backend&quot;&gt;AWS Lambda &amp;amp; Vertx Framework URL Shortener Backend&lt;/h2&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;Recently I stumbled upon &lt;a href=&quot;http://vertx.io/&quot;&gt;&lt;strong&gt;Vertx&lt;/strong&gt;&lt;/a&gt;. &lt;strong&gt;Event-driven, asynchronized, lightweight, reactive, highly performant, polyglot&lt;/strong&gt; application framework. Ideal for writing &lt;strong&gt;micro-services&lt;/strong&gt;. I played around with it for a while and really enjoyed the concept of &lt;strong&gt;serverless&lt;/strong&gt; applications.&lt;/p&gt;
&lt;p&gt;I developed a few apps and cases and started to wonder how to run and deploy them so that I get a 100% reliable service. I suddenly remembered the tech seminar that I attended recently, specifically session about serverless apps with &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;/a&gt; (Amazon Web Services) &lt;strong&gt;Lambda&lt;/strong&gt;. Lambda is a serverless compute service that runs your code in response to events and automatically manages the underlying compute resources for you. Fairly similar concepts &lt;strong&gt;Vertx&lt;/strong&gt; and &lt;strong&gt;AWS Lambda&lt;/strong&gt;, so maybe they complement each other? As it turns out they do, &lt;strong&gt;Vertx&lt;/strong&gt; can get most of your &lt;strong&gt;Lambdas&lt;/strong&gt;…&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&quot;https://serverless.com/&quot;&gt;&lt;strong&gt;Serverless Framework&lt;/strong&gt;&lt;/a&gt; to create, manage and deploy your new &lt;strong&gt;Lambdas&lt;/strong&gt; I was able to get this &lt;strong&gt;micro-service&lt;/strong&gt; up and running in no time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Enough with the talk, lets see the implementation.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Handler Class, entry point of AWS Request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first issue that I had was the &lt;strong&gt;sync&lt;/strong&gt; Event Handler that is provided by AWS. So I had to by pass it with Future. In the Handler class I first initiate Vertx instance in a static block and deploy few Verticles that will do the work. This class only receives the event, extracts needed data from the request and passes the data to Vertx EventBus. After the Consumers handle the request, Handler class will generate a proper response and finish the AWS request.&lt;/p&gt;


&lt;p&gt;&lt;em&gt;Line 4-18:&lt;/em&gt; This is where Vertx instance is created, Verticles are deployed and &lt;strong&gt;Async JDBC&lt;/strong&gt; client is created. I figured out that it is better to created JDBC client here as in some cases I was timeout when that logic was in the Verticle start method.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 27-36:&lt;/em&gt; These are helper lines, parsing and formatting the data so I can pass it to the Verticles.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 38-45:&lt;/em&gt; I have decided to map the consumers to the address that is made of request method and url path, example POST/api. This means each API request is mapped to its own consumer in Verticle class.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 47-77:&lt;/em&gt; This is nothing but a block of code that handles the response that was passed from Verticles to the Future and generates the final response that will be return to API Gateway.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;UrlService, Vertx Verticle.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Verticle class is pretty forward. Consumers that will process the message, methods for working with JDBC and helper methods for hashing/dehashing id. The logic behind url shortening is fairly simple here. Each long url is stored in database with a unique id and few additional columns. Row id is hashed and returned as short url. When retrieving long url hash is decoded to row id and long url is retrieved. Later user is redirected to long url. With this implementation, on 6 char short url (characters after the domain) you get 62^6 combinations which is 56 800 235 584 rows for storing your urls. TinyURL is currently at 6 long char urls (characters after domain). You can of course implement methods for reusing and recycling ids.&lt;/p&gt;


&lt;p&gt;As said, this is all fairly straight forward, if you are already familiar with &lt;strong&gt;Vertx&lt;/strong&gt;. If you are thinking why have I repeated the code for establish a &lt;strong&gt;JDBC&lt;/strong&gt; connection, here is the explanation &lt;em&gt;(line: 10-16)&lt;/em&gt;. I was getting Timeouts when creating JDBC connection in Verticles. To avoid this I also added this code to my Handler class. This way connection is created there and because of the &lt;strong&gt;Vertx&lt;/strong&gt; implementation any later attempt to create it again will result in just getting the instances from the first invocation. This escaped the need to pass the instances directly from the Handler class when creating Verticle instances.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Serverless configuration.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lastly I would like to share the serverless.yml, confirmation file that allows seamlessly deploy and management of AWS Lambda. With just a few commands and lines of configuration you are able to configure all necessary steps for deploying your AWS Lambda. Framework takes care of making configuration of Api-Gateway and other AWS hassle that would otherwise needed to be done by hand. In this case Lambda is invoked by HTTP events.&lt;/p&gt;


&lt;h3 id=&quot;performance-and-tests&quot;&gt;Performance and Tests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vertx&lt;/strong&gt; async capabilities eased the stress and memory needs of traditional &lt;strong&gt;AWS Lambdas&lt;/strong&gt; with sync methods. After performing load tests Lambdas that were written using Vertx framework preformed &lt;strong&gt;10% faster and consumed 40% less memory&lt;/strong&gt;. As I have read somewhere in Vertx documentation, Sync methods will definitely finish the first request faster but in total Async will be faster in the end. This savings in memory and time will definitely reduce the cost of running your Lambdas and the little overhead with additional code is for sure worth it.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;To follow the pace of demanding needs for fast and resilient services we need to move from traditional Monoliths. Embracing the &lt;strong&gt;micro service&lt;/strong&gt; architecture alone will not cut it, not anymore. With the rise and rapid advancement of &lt;strong&gt;Cloud&lt;/strong&gt; solutions it has never been so easy to make a truly &lt;strong&gt;Serverless&lt;/strong&gt; systems build upon network of &lt;strong&gt;micro services&lt;/strong&gt;.
As you have seen &lt;strong&gt;Vertx&lt;/strong&gt; with its async API makes the full advantage of &lt;strong&gt;AWS Lambdas&lt;/strong&gt;, embracing them while also improving the performance and lowering the costs. With the help from &lt;strong&gt;Serverless Framework&lt;/strong&gt; writing, deploying and managing your &lt;strong&gt;Lambdas&lt;/strong&gt; has never been so easy.&lt;/p&gt;
&lt;p&gt;If you are interested in the whole project, you can find it on &lt;a href=&quot;https://github.com/pendula95/vertx-aws-url-shortener-service/tree/master&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Info &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; this is a re-publication of the following &lt;a href=&quot;http://lazarbulic.com/blog/2017/11/10/aws-lambda-vertx-framework-url-shortener-backend/&quot;&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.15.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=37669</guid>
	<link>https://eclipsesource.com/blogs/2017/12/20/emf-forms-and-emf-client-platform-1-15-0-released/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are happy to announce that together with Oxygen.2, we have released  &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;strong&gt; 1.15.0&lt;/strong&gt;! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We want to thank our continuously active team of &lt;/span&gt;&lt;b&gt;10 contributors &lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(&lt;/span&gt;&lt;b&gt;38 contributors&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; over all) for completing on &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=UNCONFIRMED&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;bug_status=RESOLVED&amp;amp;bug_status=VERIFIED&amp;amp;bug_status=CLOSED&amp;amp;classification=Modeling&amp;amp;component=Common&amp;amp;component=Editor&amp;amp;component=EMF%20Forms&amp;amp;component=Model%20Workspace&amp;amp;component=Navigator&amp;amp;component=Validation&amp;amp;list_id=17001943&amp;amp;product=ECP&amp;amp;query_format=advanced&amp;amp;target_milestone=1.15.0&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;20 bug reports and feature requests&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is amazing to look at the on-going history of this successful project, since version 1.0.0, we have completed over 1.4k feature requests and bug reports, 38 contributors have submitted 10k commits and developed 666k lines of code. EMF Forms continues to be one of the most active projects at Eclipse.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once i a while it is fun to look at the commit history of a project. A cool project to visualize this is &lt;/span&gt;&lt;a href=&quot;http://gource.io/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Gource&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It generates a nice graph-based view of your repository and shows modifications done by different contributors. The following video visualize 6 years in 3 minutes. This is of course very fast, but you can still observe the different phase of the project, for example the regular release (which result in changes in all MANIFEST files).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you don’t know EMF Forms: It is a framework focused on the creation of form-based UIs. EMF Client Platform is designed to support the development of applications based on an EMF data model. If you are not yet familiar with EMF Forms, please refer to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/tutorials/getting-started-with-EMF-Forms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for a introduction.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Both of these frameworks are part of Eclipse Modeling Tools Oxygen.2, but you can also find the new release on our download pages:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Form&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As always, we will also blog about new features of the EMF Forms / ECP 1.15.0 release in the upcoming weeks! Please follow this blog or follow us on twitter to get notified about the new posts.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 20 Dec 2017 13:22:49 +0000</pubDate>
</item>
<item>
	<title>vert.x project: TCP Client using Eclipse Vert.x, Kotlin and Gradle build</title>
	<guid isPermaLink="true">http://vertx.io/blog/tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build</guid>
	<link>http://vertx.io/blog/tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build</link>
	<description>&lt;article&gt;&lt;p&gt;As part of my hobby project to control RaspberryPi using Google Home Mini and/or Alexa, I wanted to write a very simple TCP client that keeps a connection open to one of my custom written server in cloud (I will write another blog post to cover the server side on a later date). The requirement of the client is to send a shared secret upon connecting and then keep waiting for message from server. Vert.x, Kotlin and Gradle allow rapid development of such project. The generated jar can be executed on Raspberry Pi. These steps outline the project setup and related source code to showcase a Vert.x and Kotlin project with Gradle.&lt;/p&gt;
&lt;h2 id=&quot;project-directory-structure&quot;&gt;Project Directory Structure&lt;/h2&gt;
&lt;p&gt;From command line (or via Windows Explorer, whatever you prefer to use) create a directory for project,for instance &lt;code&gt;vertx-net-client&lt;/code&gt;. Since we are using Kotlin, we will place all Kotlin files in &lt;code&gt;src/main/kotlin&lt;/code&gt; folder. The &lt;code&gt;src/main/resources&lt;/code&gt; folder will contain our logging configuration related files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; vertx-&lt;span class=&quot;hljs-winutils&quot;&gt;net&lt;/span&gt;-client
&lt;span class=&quot;hljs-built_in&quot;&gt;mkdir&lt;/span&gt; -p src/main/kotlin
&lt;span class=&quot;hljs-built_in&quot;&gt;mkdir&lt;/span&gt; -p src/main/resources&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;project-files&quot;&gt;Project Files&lt;/h3&gt;
&lt;p&gt;We need to add following files in the project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;
If you want to check your project into git, you may consider adding following &lt;code&gt;.gitignore&lt;/code&gt; file at root of your project&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logback.xml&lt;/code&gt;
This example is using slf4j and logback for logging. If you decide to use it in your project, you may also add following logback.xml file in &lt;code&gt;src/main/resources&lt;/code&gt;. Modify it as per your requirements. This example will
log on console.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;gradle-setup&quot;&gt;Gradle Setup&lt;/h2&gt;
&lt;p&gt;We will use Gradle build system for this project. If you don’t already have Gradle available on your system, download and unzip gradle in a directory of your choice (&lt;code&gt;$GRADLE_HOME&lt;/code&gt; is used here to represent this directory). This gradle distribution will be used as a starting point to create Gradle wrapper scripts for our project. These scripts will allow our project to download and use correct version of gradle distribution automatically without messing up system. Really useful when building your project on CI tool or on any other developer’s machine.&lt;/p&gt;
&lt;p&gt;Run following command in project’s directory&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$GRADLE_HOME&lt;/span&gt;/bin/gradle wrapper&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above commands will generate following files and directories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;gradle/  gradlew  gradlew.bat&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;gradle-build-file-build-gradle-&quot;&gt;Gradle build file &lt;code&gt;build.gradle&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Create (and/or copy and modify) following &lt;code&gt;build.gradle&lt;/code&gt; in your project’s root directory. Our example gradle build file is using &lt;a href=&quot;https://github.com/jponge/vertx-gradle-plugin/&quot;&gt;vertx-gradle-plugin&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;In the project directory, run following command to download local gradle distribution:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;./gradlew&lt;/code&gt;&lt;/pre&gt;
(or `.\gradlew.bat` if in Windows)

At this stage we should have following file structure. This is also a good time to commit changes if you are working with git.

* `.gitignore`                              
* `build.gradle`                            
* `gradle/wrapper/gradle-wrapper.jar`       
* `gradle/wrapper/gradle-wrapper.properties`
* `gradlew`                                 
* `gradlew.bat`
* `src/main/resources/logback.xml`

Now that our project structure is ready, time to add the meat of the project. You may use any IDE of your choice. My preference is IntelliJ IDEA.

Create a new package under `src/main/kotlin`. The package name should be adapted from the following section of `build.gradle`

&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;vertx&lt;/span&gt; {
    &lt;span class=&quot;hljs-title&quot;&gt;mainVerticle&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;info.usmans.blog.vertx.NetClientVerticle&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the above example, the package name is &lt;code&gt;info.usmans.blog.vertx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add a new Kotlin Class/file in &lt;code&gt;src/main/kotlin/info/usmans/blog/vertx&lt;/code&gt; as &lt;code&gt;NetClientVerticle.kt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The contents of this class is as follows&lt;/p&gt;


&lt;h2 id=&quot;explaining-the-code&quot;&gt;Explaining the Code&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;fun main(args: Array)&lt;/code&gt; is not strictly required, it quickly allows running the Vert.x verticle from within IDE. You will also notice a small hack in the method for setting system property &lt;code&gt;vertx.disableDnsResolver&lt;/code&gt; which is to avoid a Netty bug that I observed when running on Windows machine and remote server is down. Of course, since we are using vertx-gradle-plugin, we can also use &lt;code&gt;gradle vertxRun&lt;/code&gt; to run our verticle. In this case the &lt;code&gt;main&lt;/code&gt; method will not get called.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;override fun start()&lt;/code&gt; method calls &lt;code&gt;fireReconnectTimer&lt;/code&gt; which in turn calls &lt;code&gt;reconnect&lt;/code&gt; method. &lt;code&gt;reconnect&lt;/code&gt; method contains the connection logic to server as well as it calls &lt;code&gt;fireReconnectTimer&lt;/code&gt; if it is unable to connect to server or disconnects from server. In &lt;code&gt;reconnect&lt;/code&gt; method the &lt;code&gt;socket.handler&lt;/code&gt; gets called when server send message to client.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;socket.handler({ data -&amp;gt;
                        logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Data received: ${data}&quot;&lt;/span&gt;)
                        //TODO: Do the work here &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
               })&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;distributing-the-project&quot;&gt;Distributing the project&lt;/h2&gt;
&lt;p&gt;To create redistributable jar, use &lt;code&gt;./gradlew shadowJar&lt;/code&gt; command. Or if using IntelliJ: from Gradle projects, Tasks, shadow, shadowJar (right click run). This command will generate &lt;code&gt;./build/libs/vertx-net-client-fat.jar&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;executing-the-client&quot;&gt;Executing the client&lt;/h3&gt;
&lt;p&gt;The client jar can be executed using following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java &lt;span class=&quot;hljs-variable&quot;&gt;-DserverHost=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DserverPort=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8888&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DconnectMessage=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt; -jar vertx-net-client-full.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to use SLF4J for Vert.x internal logging, you need to pass system property &lt;code&gt;vertx.logger-delegate-factory-class-name&lt;/code&gt; with value of &lt;code&gt;io.vertx.core.logging.SLF4JLogDelegateFactory&lt;/code&gt;. The final command would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java &lt;span class=&quot;hljs-variable&quot;&gt;-DserverHost=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DserverPort=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8888&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DconnectMessage=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt; -Dvertx.&lt;span class=&quot;hljs-variable&quot;&gt;logger-delegate-factory-class-name=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.vertx.core.logging.SLF4JLogDelegateFactory&quot;&lt;/span&gt; -jar vertx-net-client-full.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can configure Vert.x logging levels in logback.xml file if required.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post describes how easy it is to create a simple TCP client using Vert.x, Kotlin and Gradle build system. Hopefully the techniques shown here will serve as a starting point for your next DIY project.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Info &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; This post is adapted and reproduced from &lt;a href=&quot;https://usmans.info/usmansaleem/blog/tcp_client_using_vertx_kotlin_gradle&quot;&gt;author’s blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: IoT Trends for 2018</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4451</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/xEQx5m08T18/</link>
	<description>&lt;p&gt;Last year I made the bold move to write-up the &lt;a href=&quot;https://ianskerrett.wordpress.com/2016/12/19/iot-trends-to-watch-in-2017/&quot;&gt;2017 trends&lt;/a&gt; I thought would be important for the IoT industry and Eclipse IoT community. It seemed like a useful exercise so I thought a 2018 version is appropriate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Edge/Fog/IoT Gateway computing will continue to gain traction&lt;/strong&gt;.  It is not feasible that all IoT devices will be communicating directly with the cloud. The amount of data, network availability and latency, security are some of the primary drivers for pushing IoT compute toward the edges of the network. For example, an IoT solution for an oil rig needs to work regardless of connectivity to the cloud.&lt;/p&gt;
&lt;p&gt;Companies like &lt;a href=&quot;https://www.theregister.co.uk/2017/10/11/dell_iot_tech_tech_investment/&quot;&gt;Dell&lt;/a&gt;, who happen to see hardware for gateways are announcing significant investment in edge computing. &lt;a href=&quot;https://softwareengineeringdaily.com/2017/02/03/the-end-of-cloud-computing-with-peter-levine/&quot;&gt;Silicon Valley VCs&lt;/a&gt; are now saying edge computing is the next big thing and &lt;em&gt;potentially the end of cloud computing&lt;/em&gt;.  FWIW, I don’t see cloud computing ending anytime soon.&lt;/p&gt;
&lt;p&gt;I think we will continue to see Eclipse Kura and Eclipse ioFog being embraced for edge computing. In 2018, I hope we will see &lt;a href=&quot;https://www.eclipse.org/kura/&quot;&gt;Eclipse Kura&lt;/a&gt; running &lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-deeplearning4j&quot;&gt;Eclipse DeepLearning4J &lt;/a&gt; providing a great IoT machine learning platform at the edge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Digital Twins will become a thing.&lt;/strong&gt; I expect to see the IoT industry talk more about the term ‘&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_twin&quot;&gt;digital twin&lt;/a&gt;‘. Most of the major IoT vendors claim support for digital twins: &lt;a href=&quot;https://www.ge.com/digital/industrial-internet/digital-twin&quot;&gt;GE&lt;/a&gt;, &lt;a href=&quot;https://www.ibm.com/internet-of-things/spotlight/digital-twin&quot;&gt;IBM&lt;/a&gt;, &lt;a href=&quot;https://www.bosch-iot-suite.com/things/&quot;&gt;Bosch&lt;/a&gt;, &lt;a href=&quot;http://docs.aws.amazon.com/iot/latest/developerguide/iot-thing-shadows.html&quot;&gt;Amazon&lt;/a&gt;, &lt;a href=&quot;https://enterprise.microsoft.com/en-us/trends/microsoft-is-redefining-digital-twins-in-discrete-manufacturing/&quot;&gt;MS&lt;/a&gt;. It will be interesting to see if the IoT industry will agree to a common definition for digital twin and even some common standards. Some common standards would enable a more robust vendor ecosystem for digital twins.&lt;/p&gt;
&lt;p&gt;For Eclipse IoT, the &lt;a href=&quot;https://www.eclipse.org/ditto/&quot;&gt;Eclipse Ditto&lt;/a&gt; project is a new project that provides a framework for managing and creating digital twins.  The code based is from the Bosch implementation of their digital twin solution. You can check out their first &lt;a href=&quot;https://www.eclipse.org/ditto/2017-12-18-milestone-announcement-010-M1.html&quot;&gt;milestone release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;3. &lt;strong&gt;Eclipse IoT Integration&lt;/strong&gt;. The Eclipse IoT open source projects are maturing to the point where many are providing stable production ready functionality. We are seeing more and more interest in the community to focus on integration between the projects. I see this as a very positive sign and expect to see more cross-project collaborations in 2018. Is is possible the Eclipse IoT WG organizes the first Eclipse IoT release train in 2018?&lt;/p&gt;
&lt;p&gt;4. &lt;strong&gt;More Open IoT Testbeds&lt;/strong&gt;. In 2017, the IoT WG launched two &lt;a href=&quot;https://iot.eclipse.org/testbeds/&quot;&gt;open IoT Testbeds&lt;/a&gt;: 1) Asset Tracking and 2) Industry 4 Production Performance Management. These testbeds have successfully demonstrated how open source and commercial solutions can be integrated to solve a real IoT solution. In 2018, I hope we see more end-user organizations proposing and leading testbeds that show how a community of vendors can solve their IoT requirements.&lt;/p&gt;
&lt;p&gt;5. &lt;strong&gt;Technology to watch in 2018. &lt;/strong&gt;It is difficult to ignore the hype around blockchain. However it has not been clear how that blockchain technology scales up and down to meet the requirements of IoT. &lt;a href=&quot;https://iota.org/&quot;&gt;IOTA’s&lt;/a&gt; tangle technology seems to have an approach that may work for IoT. &lt;a href=&quot;https://venturebeat.com/2017/12/19/robert-bosch-venture-capital-bets-on-iota-as-it-invests-in-the-future-of-iot/&quot;&gt;Robert Bosch Venture Capital&lt;/a&gt; announcement that they have purchased IOTA tokens to invest in the future of IoT seems pretty significant.&lt;/p&gt;
&lt;p&gt;Low-power Wide-Area Network (LPWAN) technology also seems to be ready for wide adoption. There appear to be a lot of momentum around LoRaWAN. The &lt;a href=&quot;https://www.thethingsnetwork.org/&quot;&gt;Things Network&lt;/a&gt; community continues to drive forward an open source community for LoRaWAN. With more roots in the cellular industry, &lt;a href=&quot;https://www.amihotechnology.com/lora-vs-nbiot/&quot;&gt;NB-IoT appears to be the alternative to LoRaWAN&lt;/a&gt;. Wide adoption of both technologies will be a positive influence on enabling more IoT use cases.&lt;/p&gt;
&lt;p&gt;2018 will be another exciting year for IoT. My bold prediction is that 2018 is going to be the year that companies will start talking about their IoT success stories. Enjoy!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4451/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4451/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4451&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/xEQx5m08T18&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 19 Dec 2017 20:07:53 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: Dear Santa</title>
	<guid isPermaLink="true">http://melb.enix.org/2017/12/19/dear-santa/</guid>
	<link>http://melb.enix.org/2017/12/19/dear-santa/</link>
	<description>&lt;p&gt;Dear Santa Claus,&lt;/p&gt;

&lt;p&gt;My name is Mélanie and I am a little bit too old for that. It’s been a long while since I last wrote to you. This year I have been really &lt;del&gt;naughty&lt;/del&gt; nice.&lt;/p&gt;

&lt;p&gt;All I want for Christmas is:&lt;/p&gt;

&lt;p&gt;An Eclipse Sirius 6.0 version for June 2018 &lt;strong&gt;compatible with Java 8, 9, 10&lt;/strong&gt; (&lt;em&gt;&lt;a href=&quot;https://youtu.be/t7wFJzPIw8I?t=13&quot;&gt;a big fat hen&lt;/a&gt;&lt;/em&gt;), 11…  and &lt;strong&gt;Eclipse Oxygen &amp;amp; Photon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improved Xtext compatibility&lt;/strong&gt; with Sirius. &lt;em&gt;I want to thank you Santa as I already received my first present in advance this year with the &lt;a href=&quot;https://www.obeodesigner.com/en/white-paper-xtext-sirius&quot;&gt;white paper&lt;/a&gt; about how to integrate Xtext &amp;amp; Sirius editors.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UX improvements&lt;/strong&gt;: For Sirius 6 I would like to include some UX improvements that we have initially developed for some of our customer specific workbenches.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Magic connectors&lt;/strong&gt;: When I select two elements, it would propose automatically the types of connectors that could be created according to my metamodel. My user no longer needs to know exactly the metamodel to be able to create new edges between his elements.
  &lt;img alt=&quot;Magic connectors&quot; src=&quot;http://melb.enix.org/img/dear-santa/MagicConnector.gif&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rotatable ports&lt;/strong&gt;: Port which changes automatically its angle according to its position in its container or the connected edges.
  &lt;img alt=&quot;Rotatable ports&quot; src=&quot;http://melb.enix.org/img/dear-santa/RotatablePort.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deletion confirmation dialog&lt;/strong&gt;: Dialog which can be activated thanks to a global preference. When it is activated each time the user will delete a semantic element, this dialog pops up showing all the consequences of the deletion and asking for confirmation.
  &lt;img alt=&quot;Deletion confirmation dialog&quot; src=&quot;http://melb.enix.org/img/dear-santa/DeletionDialog.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;1 click product&lt;/strong&gt;: To easily create my own product based on Sirius, I have a dream… once I defined my Sirius based modeler, I click once on a button and it generates all I need to provide a bundle to my end-users.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;Early Access Program&lt;/strong&gt;: We are also preparing a new web page on the Sirius website in order to provide a preview of what we are developing. You would have the ability to test the features before they are released by downloading the beta Obeo Designer Community Edition. You would no longer need to until June to get the new features, you will be able to test them earlier and give us feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reconcile Light Client vs Rich application&lt;/strong&gt; : We decide to try to reconcile the two worlds… For Sirius 6 we are working on a new solution to &lt;em&gt;use Sirius definition with HTML Renderer within Sirius workbenches&lt;/em&gt;. We will use an hybrid model to be able to get the best of both worlds and make them coexist.
&lt;img alt=&quot;HTML renderer within Sirius workbenches&quot; src=&quot;http://melb.enix.org/img/dear-santa/HTMLRendererInSirius.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new DSL to &lt;strong&gt;define Workflows for your Sirius based workbenches&lt;/strong&gt;: You will be able to create a workflow directly in your Sirius definition and it will be rendered in HTML in the Sirius dashboard. Thanks to Santa’s elves, a &lt;a href=&quot;https://youtu.be/gm0Pn4sg5hw&quot;&gt;demo&lt;/a&gt; of the first prototype is already available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diagram in the web&lt;/strong&gt;: For Sirius 6, we are exploring an integration with &lt;a href=&quot;http://52.29.251.2:8081/examples/index.html&quot;&gt;Sprotty&lt;/a&gt; integration in Sirius designers to ease model exploration and documentation. At the moment we are focused on pure visualization, as a first step. But remember that this is exactly what we said at the beginning of Sirius: “pure visualization, no edition” but you know where we are today…&lt;/p&gt;

&lt;p&gt;Many answers to the &lt;strong&gt;&lt;a href=&quot;http://bit.ly/SiriusCommunitySurvey&quot;&gt;Sirius Community Survey&lt;/a&gt;&lt;/strong&gt;: If you have one Santa Claus letter to write this is the one! We have lots of ideas for the future of Sirius. But what we need is to know what YOU need? So please speak up! Tell us what you want by filling our survey!
&lt;a href=&quot;http://bit.ly/SiriusCommunitySurvey&quot;&gt;&lt;img alt=&quot;Sirius Community Survey&quot; src=&quot;http://melb.enix.org/img/dear-santa/SiriusCommunitySurvey.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chocolates&lt;/strong&gt; (&lt;em&gt;Dear Santa, you can find &lt;a href=&quot;https://www.obeo.fr/fr/contact&quot;&gt;my postal address&lt;/a&gt; on the Obeo website, I promise I will share them with the Obeo folks ;)&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;And in the end… a real stuffed &lt;strong&gt;Unicorn&lt;/strong&gt;, &lt;em&gt;I particularly love the Fluffy one&lt;/em&gt;.
&lt;img alt=&quot;Fluffy&quot; src=&quot;http://melb.enix.org/img/dear-santa/Fluffy.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please say hello to everyone at the North Pole, to Mrs. Claus, the elves, and all the reindeers, especially Rudolph. I am excited to see what is under the tree this year!&lt;/p&gt;

&lt;p&gt;Love always,&lt;/p&gt;

&lt;p&gt;Mélanie&lt;/p&gt;

&lt;p&gt;PS: Santa do not be afraid, the Obeo elves would support you to release a great Sirius 6! I will leave some carrots for the reindeers next to your milk and cookies!
&lt;img alt=&quot;Cookies &amp;amp; Milk&quot; src=&quot;http://melb.enix.org/img/dear-santa/cookies-milk.jpg&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 19 Dec 2017 12:00:00 +0000</pubDate>
</item>
<item>
	<title>Kai Kreuzer: openHAB 2.2 Release</title>
	<guid isPermaLink="false">http://www.kaikreuzer.de/2017/12/18/openhab22</guid>
	<link>http://www.kaikreuzer.de/2017/12/18/openhab22/</link>
	<description>&lt;p&gt;Half a year has passed since openHAB 2.1 and I am very happy that we still made it before Christmas, so that you have something nice to play with during the holiday season: &lt;a href=&quot;https://github.com/openhab/openhab-distro/releases/tag/2.2.0&quot;&gt;openHAB 2.2 is out&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The most obvious change that you will immediately notice is the rollout of our &lt;a href=&quot;https://community.openhab.org/t/new-logo-for-openhab/35140&quot;&gt;new openHAB logo&lt;/a&gt;, which you will now find in all our apps, UIs and websites.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img alt=&quot;openHAB Logo&quot; src=&quot;http://www.kaikreuzer.de/img/2017-12_logo.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But the functional evolution is of course of much more importance, and a lot has happened in the past months.&lt;/p&gt;

&lt;p&gt;While you can find all the details in the &lt;a href=&quot;https://github.com/openhab/openhab-distro/releases/tag/2.2.0&quot;&gt;official Release Notes&lt;/a&gt;, let me highlight a few of those features.&lt;/p&gt;



&lt;h3 id=&quot;new-features-for-setup--configuration&quot;&gt;New Features for Setup &amp;amp; Configuration&lt;/h3&gt;

&lt;p&gt;Huge effort went into the user experience when setting up and configuring openHAB:&lt;/p&gt;

&lt;h4 id=&quot;language-server-protocol-lsp-support-and-vs-code-extension&quot;&gt;Language Server Protocol (LSP) Support and VS Code Extension&lt;/h4&gt;

&lt;p&gt;One major step forward is the introduction of &lt;a href=&quot;https://langserver.org/&quot;&gt;Language Server Protocol (LSP)&lt;/a&gt; support in the core runtime. This allows text editors to remotely connect and do syntax validation and content assist on our configuration files, which is specifically useful when writing rules. Since these were the main features of the former Eclipse RCP-based “openHAB Designer”, this tool has been discontinued and the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=openhab.openhab&quot;&gt;VS Code Extension&lt;/a&gt; becomes its official successor.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img alt=&quot;VS Code Extension&quot; src=&quot;http://www.kaikreuzer.de/img/2017-12_vscodeext.gif&quot; /&gt;
&lt;small&gt;Visual Studio Code Extension for openHAB&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Besides the “usual” features like code highlighting, syntax validation and content assist, the openHAB VS Code Extension uses the connection to the openHAB server to provide many more great features like browsing through the available items &amp;amp; things, showing live previews of sitemaps and many more - you should definitely check it out!&lt;/p&gt;

&lt;h4 id=&quot;home-builder&quot;&gt;Home Builder&lt;/h4&gt;

&lt;p&gt;Another new tool for getting started is the &lt;a href=&quot;http://docs.openhab.org/configuration/homebuilder.html&quot;&gt;Home Builder&lt;/a&gt;, which let’s you easily define the whole structure of your home (floors, rooms, objects) and then creates the according item and sitemap files by the click of a button. No tedious typing or copying&amp;amp;pasting necessary anymore - and the risk of typos is gone! The Home Builder is automatically installed when the “Standard” installation package is chosen, all others can install it as an optional add-on.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img alt=&quot;Home Builder&quot; src=&quot;http://www.kaikreuzer.de/img/2017-12_homebuilder.png&quot; /&gt;
&lt;small&gt;The new Home Builder generates configuration files to start from&lt;/small&gt;&lt;/p&gt;

&lt;h4 id=&quot;openhabian&quot;&gt;openHABian&lt;/h4&gt;

&lt;p&gt;Talking about an easy start with openHAB, I clearly have to mention &lt;a href=&quot;http://docs.openhab.org/installation/openhabian.html&quot;&gt;openHABian&lt;/a&gt;, which has just been released in parallel: &lt;a href=&quot;https://community.openhab.org/t/openhabian-v1-4-released/37398&quot;&gt;openHABian 1.4&lt;/a&gt; is available for all Raspberry Pi models from 0W to 3 as well as for the &lt;a href=&quot;https://www.pine64.org/?page_id=1194&quot;&gt;PINE A64&lt;/a&gt;. Its setup is smoother than ever  and it by now includes an abundance of options to install next to openHAB, like Node-RED, KNXd, Grafana and FIND, just to name a few. It now also includes those directly in the openHAB dashboard, so that all of them are easily accessible from a single place.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img alt=&quot;openHABian&quot; src=&quot;http://www.kaikreuzer.de/img/2017-12_openhabian.png&quot; /&gt;
&lt;small&gt;Populated dashboard in openHABian&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-device-integrations&quot;&gt;New Device Integrations&lt;/h3&gt;

&lt;p&gt;Of course there are again &lt;a href=&quot;https://github.com/openhab/openhab-distro/releases/tag/2.2.0#addons&quot;&gt;news on the binding side&lt;/a&gt; as well. Some bindings like &lt;a href=&quot;http://docs.openhab.org/addons/bindings/dmx/readme.html&quot;&gt;DMX&lt;/a&gt;, &lt;a href=&quot;http://docs.openhab.org/addons/bindings/nest/readme.html&quot;&gt;Nest&lt;/a&gt; and &lt;a href=&quot;http://docs.openhab.org/addons/bindings/plugwise/readme.html&quot;&gt;Plugwise&lt;/a&gt; existed before, but they are now fully rewritten and support openHAB 2 features like discovery and UI-driven configuration.
Other bindings are completely new like e.g. the (specifically in Austria) very popular &lt;a href=&quot;http://docs.openhab.org/addons/bindings/loxone/readme.html&quot;&gt;Loxone&lt;/a&gt; system or the &lt;a href=&quot;http://docs.openhab.org/addons/bindings/lgwebos/readme.html&quot;&gt;webOS-based LG TV&lt;/a&gt; support. All Apple users might find the new &lt;a href=&quot;http://docs.openhab.org/addons/bindings/icloud/readme.html&quot;&gt;iCloud binding&lt;/a&gt; very useful as it provides a very simple way to do location tracking of people (or rather their devices) and through which you can also trigger “find my iPhone” in case you forgot where you have put your mobile.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img alt=&quot;iCloud Binding&quot; src=&quot;http://www.kaikreuzer.de/img/2017-12_icloud.png&quot; /&gt;
&lt;small&gt;Location tracking through the iCloud Binding&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The release notes furthermore contain a &lt;a href=&quot;https://github.com/openhab/openhab-distro/releases/tag/2.2.0#addons&quot;&gt;detailed list of all noteworthy enhancements and fixes&lt;/a&gt; that have been done on the existing add-ons.&lt;/p&gt;

&lt;h3 id=&quot;-and-more&quot;&gt;… and more&lt;/h3&gt;

&lt;p&gt;Last but not least I should mention that we also have updates for the &lt;a href=&quot;https://itunes.apple.com/us/app/openhab/id492054521?mt=8&quot;&gt;iOS app&lt;/a&gt; and the &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.openhab.habdroid&quot;&gt;Android app&lt;/a&gt; available in the app stores - especially the Android app has evolved a lot and it is awesome to see many new contributors being involved in it - check out all the new features and fixes in &lt;a href=&quot;https://github.com/openhab/openhab.android/releases/tag/2.0.0&quot;&gt;its release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the 2.2 release, we plan to come up with 2.2.x updates, which can potentially fix critical issues that are found, but which will more importantly add further bindings that are going to be merged during the next weeks. Our aim is to make the time that it takes for a new binding to become available to our release users much shorter than it is today. So stay tuned for further news on this!&lt;/p&gt;

&lt;p&gt;I hope that you like all those updates and I really think that openHAB becomes much better with every release. This wouldn’t be possible without its great community. So let me end my annoucement by thanking all contributors that drive the project forward - be it through code contributions, work on the documentation or simply by reporting bugs and involving themselves in discussions. Merry christmas to all of you!&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img alt=&quot;Merry Christmas&quot; src=&quot;http://www.kaikreuzer.de/img/2017-12_xmas.jpg&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: IoT weekend 2017 : my session about messaging and IoT … video and slides !</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=5512</guid>
	<link>https://paolopatierno.wordpress.com/2017/12/16/iot-weekend-2017-my-session-about-messaging-and-iot-video-and-slides/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;iot_weekend&quot; class=&quot;alignnone size-full wp-image-5513&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/12/iot_weekend.png?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Today I had a really interesting experience thanks to &lt;a href=&quot;https://twitter.com/jorgemaia&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Jorge Maia&lt;/a&gt; who, few weeks ago, invited me to have a session for the online Brazilian event &lt;a href=&quot;http://iotweekend.com.br/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;IoT Weekend&lt;/a&gt;.  Of course, I accepted his invitation in order to speak about “Open sourcing the messaging and IoT” focusing on IoT protocols, patterns and related platforms like &lt;a href=&quot;http://enmasse.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/hono/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The event is still going on while I’m writing this blog post (for all this weekend) but my session ended less than one hour ago so I’d like to share the material for all the attendees and for the other people who lose the session and could be interested to watch it !&lt;/p&gt;
&lt;p&gt;So you can find the video on YouTube &lt;a href=&quot;https://www.youtube.com/watch?v=ZIp9EPQ25eM&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and the slide deck on SlideShare &lt;a href=&quot;https://www.slideshare.net/paolopat/open-sourcing-the-messaging-and-iot&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/5512/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/5512/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=5512&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 16 Dec 2017 14:34:10 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter | Capella: open source MBSE solution</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/75b8o5uDyQc/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/75b8o5uDyQc/</link>
	<description>Learn everything about Capella, an open source workbench based on Eclipse technology that allows engineers to design complex systems.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/75b8o5uDyQc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 14 Dec 2017 15:10:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Open Source Community Accelerates Big Data Analytics for Geospatial Solutions</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/g_I_oTBERs4/20171214_locationtechopensource.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/g_I_oTBERs4/20171214_locationtechopensource.php</link>
	<description>LocationTech announces new project releases that provide core technology for geospatial big data analytic solutions.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/g_I_oTBERs4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 14 Dec 2017 13:00:00 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Debugger 11: Watch expressions</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-4955268343761314952</guid>
	<link>http://codeandme.blogspot.com/2017/12/debugger-11-watch-expressions.html</link>
	<description>Now that we have variables working, we might also want to include watch expressions to dynamically inspect code fragments.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Debug Framework Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all debug related tutorials see &lt;a href=&quot;http://codeandme.blogspot.co.at/p/blog-page.html&quot; target=&quot;_blank&quot;&gt;Debug Framework Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_11_watch_expressions.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_11_watch_expressions.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/debugger/11_watch_expressions&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 1: Provide the Watch Expression Delegate&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Watch points are implemented via an extension point. So switch to your &lt;i&gt;plugin.xml&lt;/i&gt; and add a new extension point for &lt;i&gt;org.eclipse.debug.core.watchExpressionDelegates&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;The new delegate simply points to our &lt;i&gt;debugModel&lt;/i&gt; identifier: &lt;i&gt;com.codeandme.debugModelPresentation.textinterpreter&lt;/i&gt; and provides a class implementation:&lt;/div&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextWatchExpressionDelegate implements IWatchExpressionDelegate {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void evaluateExpression(String expression, IDebugElement context, IWatchExpressionListener listener) {&lt;br /&gt;  if (context instanceof TextStackFrame)&lt;br /&gt;   ((TextStackFrame) context).getDebugTarget().fireModelEvent(new EvaluateExpressionRequest(expression, listener));&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;Delegates can decide on which context they may operate. For our interpreter we could evaluate expressions on &lt;i&gt;StackFrames&lt;/i&gt;, &lt;i&gt;Threads&lt;/i&gt; or the &lt;i&gt;Process&lt;/i&gt;, but typically evaluations do take place on a dedicated &lt;i&gt;StackFrame&lt;/i&gt;.&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;b&gt;&lt;u&gt;Step 2: Evaluation&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Now we apply the usual pattern: send an event, let the debugger process it and send some event back to the debug target. Once the evaluation is done we then will inform the provided listener of the outcome of the evaluation.&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextDebugTarget extends TextDebugElement implements IDebugTarget, IEventProcessor {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void handleEvent(final IDebugEvent event) {&lt;br /&gt;&lt;br /&gt;   [...]&lt;br /&gt;&lt;br /&gt;   } else if (event instanceof EvaluateExpressionResult) {&lt;br /&gt;    IWatchExpressionListener listener = ((EvaluateExpressionResult) event).getOriginalRequest().getListener();&lt;br /&gt;    TextWatchExpressionResult result = new TextWatchExpressionResult((EvaluateExpressionResult)event, this);&lt;br /&gt;    listener.watchEvaluationFinished(result);    &lt;br /&gt;   }&lt;br /&gt; }&lt;/pre&gt;The &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/debugger/11_watch_expressions/com.codeandme.debugger.textinterpreter.debugger/src/com/codeandme/debugger/textinterpreter/debugger/model/TextWatchExpressionResult.java&quot; target=&quot;_blank&quot;&gt;TextWatchExpressionResult&lt;/a&gt; uses a &lt;i&gt;TextValue&lt;/i&gt; to represent the evaluation result. As before with variables we may support nested child variables within the value. In case the evaluation failed for some reason we may provide error messages which do get displayed in the &lt;i&gt;Expressions&lt;/i&gt; view.</description>
	<pubDate>Thu, 14 Dec 2017 11:03:32 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Christian Pontesegger: Debugger 10: Editing variables</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-272003061272452073</guid>
	<link>http://codeandme.blogspot.com/2017/12/debugger-10-editing-variables.html</link>
	<description>In the previous tutorial we introduced variables support for our debugger. Now lets see how we can modify variables dynamically during a debug session.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Debug Framework Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all debug related tutorials see &lt;a href=&quot;http://codeandme.blogspot.co.at/p/blog-page.html&quot; target=&quot;_blank&quot;&gt;Debug Framework Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_10_variable_editing.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_10_variable_editing.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/debugger/10_variable_editing&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 1: Allowing for editing and trigger update&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First variables need to support editing. Then the variables view will automatically provide a text input box on the value field once clicked by the user. This is also a limitation: editing variables requires the framework to interpret an input string and process it accordingly to the target language.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The relevant changes for the &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/debugger/10_variable_editing/com.codeandme.debugger.textinterpreter.debugger/src/com/codeandme/debugger/textinterpreter/debugger/model/TextVariable.java&quot; target=&quot;_blank&quot;&gt;TextVariable&lt;/a&gt; class are shown below:&lt;/div&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextVariable extends TextDebugElement implements IVariable {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void setValue(String expression) {&lt;br /&gt;  getDebugTarget().fireModelEvent(new ChangeVariableRequest(getName(), expression));&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public boolean supportsValueModification() {&lt;br /&gt;  return true;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public boolean verifyValue(String expression) throws DebugException {&lt;br /&gt;  return true;&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;i&gt;verifyValue(String)&lt;/i&gt; and &lt;i&gt;setValue(String)&lt;/i&gt; are used by the debug framework when a user tries to edit a variable in the UI. We do not need to update the value yet, but simply trigger an event to update the variable in the debugger.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Variable update &amp;amp; refresh&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;As our primitive interpreter accepts any kind of text variables there is nothing which can go wrong here. Instead of sending an update event for the changed variable we simply use the already existing &lt;i&gt;VariablesEvent&lt;/i&gt; to force a refresh of all variables of the current &lt;i&gt;TextStackFrame&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextDebugger implements IDebugger, IEventProcessor {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void handleEvent(final IDebugEvent event) {&lt;br /&gt;&lt;br /&gt;  [...]&lt;br /&gt;&lt;br /&gt;  } else if (event instanceof ChangeVariableRequest) {&lt;br /&gt;   fInterpreter.getVariables().put(((ChangeVariableRequest) event).getName(), ((ChangeVariableRequest) event).getContent());&lt;br /&gt;   fireEvent(new VariablesEvent(fInterpreter.getVariables()));&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 14 Dec 2017 10:13:07 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>PapyrusUML: Papyrus and the Papyrus IC at Euroforum</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1062</guid>
	<link>https://papyrusuml.wordpress.com/2017/12/13/papyrus-and-the-papyrus-ic-at-euroforum/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://twitter.com/MKoegel/status/940669044780355584?t=1&amp;amp;cn=ZmxleGlibGVfcmVjc18y&amp;amp;refsrc=email&amp;amp;iid=10aa808150e048029b010ac46ef98fe6&amp;amp;uid=2707245008&amp;amp;nid=244+293670912&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot; alignright&quot; src=&quot;https://pbs.twimg.com/media/DQ3tfvyW0AA32zn.jpg&quot; style=&quot;width: 25%; height: 25%;&quot; title=&quot;Maximilian and I&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Yesterday, my minion Maximilian went to the &lt;a href=&quot;http://www.euroforum.de/software-eng/conference-2017/programme-2017/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Automotive Software Development Conference (Euroforum)&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/MKoegel/status/940669044780355584?t=1&amp;amp;cn=ZmxleGlibGVfcmVjc18y&amp;amp;refsrc=email&amp;amp;iid=10aa808150e048029b010ac46ef98fe6&amp;amp;uid=2707245008&amp;amp;nid=244+293670912&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;presented me and my Industry Consortium&lt;/a&gt;!&lt;br /&gt;
I hope I made a good impression (I’m sure Maximilian did a great job)!&lt;/p&gt;
&lt;p&gt;Maybe one day, you will be driving a car with software designed with my help!&lt;/p&gt;
		&lt;div class=&quot;wpcnt&quot;&gt;
			&lt;div class=&quot;wpa wpmrec&quot;&gt;
				&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;
				&lt;div class=&quot;u&quot;&gt;		&lt;div style=&quot;padding-bottom: 15px; width: 300px; height: 250px; float: left; margin-right: 5px; margin-top: 0px;&quot;&gt;
		&lt;div id=&quot;atatags-26942&quot;&gt;
			
		&lt;/div&gt;&lt;/div&gt;		&lt;div style=&quot;padding-bottom: 15px; width: 300px; height: 250px; float: left; margin-top: 0px;&quot;&gt;
		&lt;div id=&quot;atatags-114160&quot;&gt;
			
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
						&lt;div id=&quot;crt-1876555177&quot; style=&quot;width: 300px; height: 250px; display: none !important;&quot;&gt;&lt;/div&gt;
		&amp;amp;b		&lt;div id=&quot;crt-923597790&quot; style=&quot;width: 300px; height: 250px; display: none !important;&quot;&gt;&lt;/div&gt;
		&amp;amp;b
			&lt;/div&gt;
		&lt;/div&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/community/&quot;&gt;community&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/conference/&quot;&gt;Conference&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus/&quot;&gt;Papyrus&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/&quot;&gt;Papyrus IC&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/automotive/&quot;&gt;automotive&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/industry/&quot;&gt;industry&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=1062&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 21:31:20 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Remote Services between Python and Java</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5260961538771372620</guid>
	<link>http://eclipseecf.blogspot.com/2017/12/remote-services-between-python-and-java.html</link>
	<description>ECF's implementation of OSGi Remote Services allows multiple distribution providers, which are responsible for the actual rpc communication required by remote services.   &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot; target=&quot;_blank&quot;&gt;Here is a list of ECF distribution providers we've created&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Using &lt;a href=&quot;https://www.py4j.org/&quot; target=&quot;_blank&quot;&gt;Py4j&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot; target=&quot;_blank&quot;&gt;Google Protocol Buffers&lt;/a&gt;, we've recently enhanced an ECF distribution provider that allows the use of remote services (and Remote Service Admin) between OSGi and Python.   Service impls can be in either Java or Python, and consumers can be either Java or Python.     Protocol Buffers can be used to efficiently serialize arguments and return values.&lt;br /&gt;&lt;br /&gt;The only dependencies are on OSGi, Py4j, and Google Protocol buffers, so this distribution provider can be used in Eclipse or other OSGi environments like Karaf.&lt;br /&gt;&lt;br /&gt;Get the most recent release, with examples and source code at &lt;a href=&quot;https://github.com/ECF/Py4j-RemoteServicesProvider&quot; target=&quot;_blank&quot;&gt;this github repository&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 15:23:13 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Eclipse Announcements: Announcing Open IoT Challenge 4.0 Scholars</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/SPNINveKIds/open-iot-challenge-4-0-scholars-cf750ec3b14b</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/SPNINveKIds/open-iot-challenge-4-0-scholars-cf750ec3b14b</link>
	<description>Congratulations to the Top 12 teams who submitted the best proposals for the fourth Open IoT Challenge!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/SPNINveKIds&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 14:45:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.5.2.AM2 for Eclipse Oxygen.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.5.2.am2-for-oxygen.2.html</guid>
	<link>https://tools.jboss.org/blog/4.5.2.am2-for-oxygen.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.5.2.AM2 (Developer Milestone 2) build for Eclipse Oxygen.2 (built with RC2).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/oxygen/4.5.2.AM2.html&quot;&gt;JBoss Tools 4.5.2 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.5.2.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;/a&gt;Fuse 7 Karaf-based runtime Server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fuse 7 is cooking and preliminary versions are already available on &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/groups/ea/org/jboss/fuse/jboss-fuse-karaf&quot;&gt;early-access repository&lt;/a&gt;. Fuse Tooling is ready to leverage them so that you can try the upcoming major Fuse version.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse 7 Server Adapter&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/Fuse7-ServerAdapter.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Classical functionalities with server adapters are available: automatic redeploy, Java debug, Graphical Camel debug through created JMX connection.
      Please note:
      - you can’t retrieve the Fuse 7 Runtime yet directly from Fuse tooling, it is required to download it on your machine and point to it when creating the Server adapter.
      - the provided templates requires some modifications to have them working with Fuse 7, mainly adapting the bom. Please see work related to it in this &lt;a href=&quot;https://issues.jboss.org/browse/FUSETOOLS-2578&quot;&gt;JIRA task&lt;/a&gt; and its children.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;/a&gt;Display routes defined inside &quot;routeContext&quot; in Camel Graphical Editor (Design tab)&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&quot;routeContext&quot; tag is a special tag used in Camel to provide the ability to reuse routes and to split them across different files. This is very useful on large projects. See Camel &lt;a href=&quot;http://camel.apache.org/how-do-i-import-routes-from-other-xml-files.html&quot;&gt;documentation&lt;/a&gt; for more information.
      Since this version, the Design of the routes defined in &quot;routeContext&quot; tags are now displayed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;/a&gt;Usability improvement: Progress bar when &quot;Changing the Camel version&quot;&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since Fuse Tooling 10.1.0, it is possible to change the Camel version. In case the Camel version was not cached locally yet and for slow internet connections, this operation can take a while. There is now a progress bar to see the progress.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Switch Camel Version with Progress Bar&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/switchCamelVersionWithProgressBar.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 13 Dec 2017 07:40:47 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: November Java User Group Tour 2017</title>
	<guid isPermaLink="false">https://medium.com/p/dbb103b80532</guid>
	<link>https://medium.com/@nikhilnanivadekar/november-java-user-group-tour-2017-dbb103b80532?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/780/1*tzip632awNaAOq9PZkUBtg.png&quot; /&gt;Cities visited&lt;/figure&gt;&lt;p&gt;This year I had the pleasure to visit multiple Java User Groups in England, Ireland, Northern Ireland and Scotland. I presented about &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;, Java 9 and Robots.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 1–25 November 2017: London Java Community (LJC) Unconference:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CsAoUjxY_Tj2U2EPraAU-A.jpeg&quot; /&gt;Central London&lt;/figure&gt;&lt;p&gt;I had the opportunity to participate in the &lt;a href=&quot;https://www.meetup.com/Londonjavacommunity&quot;&gt;LJC &lt;/a&gt;Unconference. This year it was disorganized in a &lt;a href=&quot;http://www.jcrete.org/&quot;&gt;JCrete &lt;/a&gt;like format. I did an ignite session on &lt;em&gt;How you can support open source projects?&lt;/em&gt; I mentioned some aspects like starring a project’s repository, using the project, raising issues and bugs, contributing bug fixes/ enhancements and most importantly documentation. In the last session of the day I did an introduction to &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Kata&lt;/a&gt; a fun way to learn Eclipse Collections framework. Then we all headed to a pub close by and continued discussions over a few beers.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 2–26 November 2017: Travel to Dublin:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*U2P3HlkZ6WN0RPMw2tHPrw.jpeg&quot; /&gt;View from Dublin airport&lt;/figure&gt;&lt;p&gt;The train to Gatwick was canceled but it did not deter my excitement and I (barely) made it to my flight to Dublin from London. This was my first time in Dublin, I walked around the city and went to a few places suggested by friends. I met them for a nice dinner at a Chinese restaurant, roamed around the city, had Guiness and ended the night with some live Irish folk music and Irish Coffee.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 2–27 November 2017: Belfast Java User Group:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*6gXC7cvG0QxrCBeS8tXsIA.jpeg&quot; /&gt;Belfast&lt;/figure&gt;&lt;p&gt;I took a short, comfortable and scenic bus ride to Belfast from Dublin. I did manage to get some sleep and arrived refreshed near Belfast city center. After having a quick lunch, I checked in at my AirBnb and assembled the robots for the presentation in the evening. I roamed around the city, strolled around in the Belfast Christmas market and enjoyed few delicacies. I met one of the organizers before the presentation for a quick pint and he presented the &lt;a href=&quot;https://www.meetup.com/BelfastJUG/&quot;&gt;Belfast JUG&lt;/a&gt; coffee mug to me. I presented &lt;em&gt;Robots for Kid in Us&lt;/em&gt; and &lt;em&gt;API Design of Eclipse Collections&lt;/em&gt;. We had good discussions around how we choose to evolve our API and decisions which we take while adding any new API. The night ended with a Guiness at &lt;a href=&quot;http://visitbelfast.com/things-to-do/member/bittles-bar&quot;&gt;Bittles Bar&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 3–28 November 2017: Dublin Java User Group:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*AQmVFKvMHVw4yQFgnOxTIA.jpeg&quot; /&gt;Dublin&lt;/figure&gt;&lt;p&gt;I took a bus back to Dublin and checked in at my AirBnb close to &lt;a href=&quot;https://en.wikipedia.org/wiki/Temple_Bar,_Dublin&quot;&gt;Temple Bar&lt;/a&gt;. I met the organizer of &lt;a href=&quot;http://www.dubjug.org/&quot;&gt;DubJUG&lt;/a&gt; and enjoyed some much needed and filling lunch. With about 3 hours left to spend, I wandered to the Jameson Distillery, took a tour and headed over for my presentations on &lt;em&gt;Collections.compare&lt;/em&gt; and &lt;em&gt;How to make your project Java 9 compatible&lt;/em&gt;. I ended up presenting for more than 3 hours. One unique thing by audience demand I did was, explained how we code generate all the primitive collections in Eclipse Collections. The night ended with Jameson and some Irish folk music.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 4–29 November 2017: Edinburgh Java User Group:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/960/1*l5bCQaFW7vnv17qYSdQWYQ.jpeg&quot; /&gt;Edinburgh&lt;/figure&gt;&lt;p&gt;I traveled via flight to Edinburgh from Dublin. I had a traditional lunch of Haggis and mash with the only Java Champion in Scotland and walked around Edinburgh. I strolled around Edinburgh, watched a live march, went whiskey/scotch tasting and got ready for the presentation in the evening. The meet up was kicked off by one of the organizers of &lt;a href=&quot;http://www.edjug.org/&quot;&gt;Edinburgh JUG&lt;/a&gt; with a discussion about &lt;em&gt;What’s new with Java&lt;/em&gt;.&lt;em&gt; &lt;/em&gt;I followed with &lt;em&gt;Collections.compare&lt;/em&gt;. We went to a pub right down the street discussed more about Java and a bit about politics. After that I headed to &lt;a href=&quot;http://www.whiskibar.co.uk/&quot;&gt;Whisky bar&lt;/a&gt; for some lively Scottish music and ended the night with Balvenie.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 5–30 November 2017: Manchester Java Community (MJC):&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gzsh7_PYvZvavpwIdzwXgQ.jpeg&quot; /&gt;Manchester&lt;/figure&gt;&lt;p&gt;The day started with a tasty, filling and traditional Scottish breakfast. After a brisk walk to Edinburgh Waverley station I was ready to board the train to Manchester, but, the train was canceled! I was put on a different train with a connection at Preston. I reached Manchester Piccadilly station late afternoon and enjoyed delicious lunch at &lt;a href=&quot;https://www.yelp.com/biz/kabana-manchester&quot;&gt;Kabana&lt;/a&gt;. I met one of the organizers of &lt;a href=&quot;https://www.meetup.com/ManchesterUK-Java-Community&quot;&gt;Manchester Java Community&lt;/a&gt;, we had met at JCrete in 2016 and have since been friends. In autumn, he convinced me to visit and present at MJC and thus the organization of the JUG tour began. I presented &lt;em&gt;Collections.compare&lt;/em&gt; and &lt;em&gt;How to make your project Java 9 compatible&lt;/em&gt;. It was very well received and we continued our discussions at &lt;a href=&quot;http://piccadillytap.com/&quot;&gt;Piccadilly Tap&lt;/a&gt; and ended the night with some local ale.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 6–1 December 2017: West Midlands Java User Group (WMJUG):&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/960/1*0tPJ5GBUjJNY3RQU0T7TFA.jpeg&quot; /&gt;Birmingham&lt;/figure&gt;&lt;p&gt;I had lunch at Kabana (again) and headed to Birmingham from Manchester via train. No train delays this time yay! This was the last JUG I was scheduled to present on this trip. I stored my bags at the meet-up location and set out for a walk around Birmingham. I love to walk and explore whenever I am visiting a new place. I stumbled across a Needless Alley 2, I didn’t call it needless, it was named so! Next time I visit Birmingham I do want to search for Needless Alley 1. The walk around Birmingham was relaxing as I reflected about the JUG tour and was happy with the way it turned out. I headed back to meet up location and presented &lt;em&gt;Collections.compare&lt;/em&gt; and &lt;em&gt;Robots for Kid in Us&lt;/em&gt;. After the presentation, I walked over to Birmingham International station for my train to London. As always the bad luck with trains continued and the train was delayed by more than an hour. However, I was happy, excited and content by the success of JUG tour and train delays could not crush my spirit. Finally, the train arrived and I was London bound.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 7,8–2,3 December 2017: Hanging out with friends in London:&lt;/strong&gt;&lt;br /&gt;If you go to a different place and don’t meet your friends, I don’t call that visiting. I met my friends from London, watched a Premier League match at a local pub, tasted some fresh brew at a micro-brewery, enjoyed a delicious and filling Sunday Roast and of course had fish and chips.&lt;/p&gt;&lt;p&gt;I headed home after a successful JUG tour and will definitely do it again next year. I would like to thank the organizers of London JC (Twitter: &lt;a href=&quot;https://twitter.com/ljcjug&quot;&gt;ljcjug&lt;/a&gt;), Belfast JUG (Twitter: &lt;a href=&quot;https://twitter.com/BelfastJUG&quot;&gt;BelfastJUG&lt;/a&gt;), Dublin JUG (Twitter: &lt;a href=&quot;https://twitter.com/DubJug&quot;&gt;DubJug&lt;/a&gt;), Edinburgh JUG (Twitter: &lt;a href=&quot;https://twitter.com/edinburghjava&quot;&gt;edinburghjava&lt;/a&gt;), Manchester JC (Twitter: &lt;a href=&quot;https://twitter.com/mcrjava&quot;&gt;mcrjava&lt;/a&gt;), West Midlands JUG (Twitter: &lt;a href=&quot;https://twitter.com/wm_jug&quot;&gt;wm_jug&lt;/a&gt;). I would also like to thank all my friends for their support, timely feedback, encouragement, tweets, emails and chats. I would like to thank everyone who starred the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;Eclipse Collections Repository&lt;/a&gt; and showed their support. Last but not the least, a very big thank you to everyone who attended and supported me!&lt;/p&gt;&lt;p&gt;In this short travelogue I tried to describe my experience, but honestly I did not come even close to the real awesome experience. In the future I plan to do JUG tours across different countries.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=dbb103b80532&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 04:39:17 +0000</pubDate>
</item>

</channel>
</rss>
